openapi: 3.0.0

info:
  title: Shop API
  description: API for home appliance store.
  version: 1.0.0

tags:
  - name: Addresses
    description: API for managing addresses
  - name: Clients
    description: API for managing clients
  - name: Images
    description: API for handling images
  - name: Products
    description: API for managing products
  - name: Suppliers
    description: API for managing suppliers

servers:
  - url: http://localhost:8080/api
    description: Local server

paths:
  /addresses:
    get:
      summary: Get an address by ID
      tags: [Addresses]
      parameters:
        - in: query
          name: address_id
          schema:
            type: integer
          required: true
          description: The ID of the address to obtain
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  country:
                    type: string
                  city:
                    type: string
                  street:
                    type: string
                example:
                  country: Russia
                  city: Kazan
                  street: Lenin str
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: "Request must contain query parameter: address_id"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: Address not found
    post:
      summary: Create a new address
      tags: [Addresses]
      requestBody:
        description: A new address to add
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                country:
                  type: string
                city:
                  type: string
                street:
                  type: string
              example:
                country: Russia
                city: Kazan
                street: Academic Kirpichnikov
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  new_address:
                    type: object
                    properties:
                      id:
                        type: integer
                      country:
                        type: string
                      city:
                        type: string
                      street:
                        type: string
                    example:
                      id: 1
                      country: Russia
                      city: Kazan
                      street: Academic Kirpichnikov
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: Request body must be JSON
    delete:
      summary: Delete an address by ID
      tags: [Addresses]
      requestBody:
        description: The address that needs to be deleted by its ID
        parameters:
        - in: query
          name: address_id
          schema:
            type: integer
          required: true
          description: The ID of the address to delete
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: "Request must contain query parameter: address_id"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: Address not found
  
  /clients:
    post:
      summary: Create a new client
      tags: [Clients]
      requestBody:
        description: A new client to add
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                client_name:
                  type: string
                client_surname:
                  type: string
                birthday:
                  type: string
                  format: date
                gender:
                  type: string
                  enum: [male, female]
                address_id:
                  type: integer
              example:
                client_name: John
                client_surname: Dickson
                birthday: "2003-11-12"
                gender: male
                address_id: 1
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  new_client:
                    type: object
                    properties:
                      client_name:
                        type: string
                      client_surname:
                        type: string
                      birthday:
                        type: string
                        format: date
                      gender:
                        type: string
                        enum: [male, female]
                      address:
                        type: object
                        properties:
                          id:
                            type: integer
                          country:
                            type: string
                          city:
                            type: string
                          street:
                            type: string
                example:
                  new_client:
                    client_name: John
                    client_surname: Dickson
                    birthday: "2003-11-12"
                    gender: male
                    address:
                      id: 1
                      country: Russia
                      city: Kazan
                      street: Academic Kirpichnikov
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: Request body must be JSON
    delete:
      summary: Delete client by ID
      tags: [Clients]
      requestBody:
        description: The client who needs to be deleted by his ID
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                client_id:
                  type: integer
                  description: The client's ID in the database
                  example: 1
      responses:
        '204':
          description: The client was successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/Success'
        '400':
          description: Error on the client side
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
        '404':
          description: The client was not found
          content:
            application/json:
              schema:
                $ref: '#/components/NotFound'
    get:
      summary: Get client by his name and surname
      tags: [Clients]
      requestBody:
        description: The client you need to get by his first and last name
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Client name
                  example: John
                surname:
                  type: string
                  description: Client Surname
                  example: Johnson
      responses:
        '200':
          description: The client was successfully found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '400':
          description: Error on the client side
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
        '404':
          description: The client was not found
          content:
            application/json:
              schema:
                $ref: '#/components/NotFound'
    patch:
      summary: Change the client's address by his ID
      tags: [Clients]
      requestBody:
        description: ID of the client whose address needs to be changed; new address
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                client_id:
                  type: integer
                  description: The client's ID in the database
                  example: 1
                new_address:
                  $ref: '#/components/schemas/Address'
      responses:
        '204':
          description: The client's address has been successfully changed
          content:
            application/json:
              schema:
                $ref: '#/components/Success'
        '400':
          description: Error on the client side
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
        '404':
          description: The client was not found
          content:
            application/json:
              schema:
                $ref: '#/components/NotFound'
  /all-clients:
    get:
      summary: Get all clients
      tags: [Clients]
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: Maximum number of items to return
          required: false
        - in: query
          name: offset
          schema:
            type: integer
          description: Offset from the beginning of the list
          required: false
      responses:
        '200':
          description: List of all clients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
        '400':
          description: Error on the client side
          content:
            application/json:
              schema:
                $ref: '#/components/Error'

  /images:
    post:
      summary: Add image
      tags: [Images]
      parameters:
      - in: query
        name: product_id
        schema:
          type: integer
          description: The ID of the product to add an image for
          example: 1
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
              description: Binary image data
      responses:
        '201':
          description: Image successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/Success'
        '400':
          description: Error on the client side
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
        '404':
          description: The product for which you need to add an image has not been found.
          content:
            application/json:
              schema:
                $ref: '#/components/NotFound'
    delete:
      summary: Delete image by UUID
      tags: [Images]
      requestBody:
        description: The UUID to delete the image by
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/GetDeleteImageById'
      responses:
        '204':
          description: The image was successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/Success'
        '400':
          description: Error on the client side
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
        '404':
          description: Image not found
          content:
            application/json:
              schema:
                $ref: '#/components/NotFound'
    patch:
      summary: Replace the product image by its ID
      tags: [Images]
      parameters:
        - in: query
          name: product_id
          schema:
            type: integer
          description: Product ID in the database
          required: true
      requestBody:
        description: The ID of the product whose image needs to be replaced
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
              description: Binary image data
      responses:
        '204':
          description: The image has been successfully replaced
          content:
            application/json:
              schema:
                $ref: '#/components/Success'
        '400':
          description: Error on the client side
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/NotFound'
  /image-by-id:
    get:
      summary: Get an image by UUID
      tags: [Images]
      requestBody:
        description: The UUID used to get the image
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/GetDeleteImageById'
      responses:
        '200':
          description: Image found successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Error on the client side
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
        '404':
          description: Image not found
          content:
            application/json:
              schema:
                $ref: '#/components/NotFound'
  /image-by-product-id:
    get:
      summary: Get a product image by its ID
      tags: [Images]
      requestBody:
        description: The ID of the product to get the image of
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_id:
                  type: integer
                  description: Product ID in the database
                  example: 1
      responses:
        '200':
          description: Image found successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Error on the client side
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/NotFound'

  /products:
    post:
        summary: Add new product
        tags: [Products]
        requestBody:
          description: A new product that needs to be added
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        responses:
          '201':
            description: Product added successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/Success'
          '400':
            description: Error on the client side
            content:
              application/json:
                schema:
                  $ref: '#/components/Error'
    delete:
      summary: Delete product by ID
      tags: [Products]
      requestBody:
        description: The product that needs to be deleted by its ID
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_id:
                  type: integer
                  description: Product ID in the database
                  example: 1
      responses:
        '204':
          description: The product was successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/Success'
        '400':
          description: Error on the client side
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/NotFound'
    get:
      summary: Get a product by ID
      tags: [Products]
      requestBody:
        description: The product that needs to be obtained by its ID
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_id:
                  type: integer
                  description: Product ID in the database
                  example: 1
      responses:
        '200':
          description: The product was successfully found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Error on the client side
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/NotFound'
    patch:
      summary: Reduce the quantity of a product by its ID
      tags: [Products]
      requestBody:
        description: ID of the product to reduce its quantity
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_id:
                  type: integer
                  description: Product ID in the database
                  example: 1
                reduce_by:
                  type: integer
                  description: How much should be reduced
                  example: 6
      responses:
        '204':
          description: The number has been successfully reduced
          content:
            application/json:
              schema:
                $ref: '#/components/Success'
        '400':
          description: Error on the client side
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/NotFound'
  
  /suppliers:
    post:
        summary: Add a new supplier
        tags: [Suppliers]
        requestBody:
          description: A new supplier to add
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'
        responses:
          '201':
            description: Supplier added successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/Success'
          '400':
            description: Error on the client side
            content:
              application/json:
                schema:
                  $ref: '#/components/Error'
    delete:
      delete:
      summary: Delete seupplier by ID
      tags: [Suppliers]
      requestBody:
        description: The supplier that needs to be deleted by its ID
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                supplier_id:
                  type: integer
                  description: Supplier's ID in the database
                  example: 1
      responses:
        '204':
          description: The supplier was successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/Success'
        '400':
          description: Error on the client side
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/NotFound'
    get:
      summary: Get supplier by ID
      tags: [Suppliers]
      requestBody:
        description: The supplier you need to get by his ID
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_id:
                  type: integer
                  description: The supplier's ID in the database
                  example: 1
      responses:
        '200':
          description: Supplier found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'
        '400':
          description: Error on the client side
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
        '404':
          description: Supplier not found
          content:
            application/json:
              schema:
                $ref: '#/components/NotFound'
    patch:
      summary: Change the supplier's address by its ID
      tags: [Suppliers]
      requestBody:
        description: ID of the supplier whose address needs to be changed; new address
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                client_id:
                  type: integer
                  description: Supplier's ID in the database
                  example: 1
                new_address:
                  $ref: '#/components/schemas/Supplier'
      responses:
        '204':
          description: The supplier's address has been successfully changed
          content:
            application/json:
              schema:
                $ref: '#/components/Success'
        '400':
          description: Error on the client side
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
        '404':
          description: Supplier not found
          content:
            application/json:
              schema:
                $ref: '#/components/NotFound'
  /all-suppliers:
    get:
      summary: Get all suppliers
      tags: [Suppliers]
      responses:
        '200':
          description: List of all suppliers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Supplier'
        '400':
          description: Error on the client side
          content:
            application/json:
              schema:
                $ref: '#/components/Error'
